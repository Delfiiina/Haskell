En la terminal:: Pruebas de las primeras cosas. 

PS C:\Delfina\haskell\aparte> ghci
Loaded package environment from C:\Users\eugeb\AppData\Roaming\ghc\x86_64-mingw32-9.8.1\environments\default
GHCi, version 9.8.1: https://www.haskell.org/ghc/  :? for help
            -> Prueba funciones básicas de haskell
ghci> succ 3
4
ghci> succ 4
5
ghci> succ 0
1
ghci> min 10 9
9
ghci> max 10 9
10
ghci> :r
Ok, no modules loaded.
ghci> :l primero.hs
[1 of 2] Compiling Main             ( primero.hs, interpreted )
Ok, one module loaded.
ghci> numerosSimples 1
1
ghci> numerosSimples 5
0
ghci> numerosSimples 9
4
ghci> pruebaSentenciaIf 4
"Ese numero es par!"
ghci> pruebaSentenciaIf 5
"Ese numero es impar!"
ghci> pruebaSentenciaIf (succ 6)
"Ese numero es impar!"
ghci> pruebaSentenciaIf (succ 9)
"Ese numero es par!"
              -> Listas
ghci> [1..5]
[1,2,3,4,5]
ghci> [2,4..10]
[2,4,6,8,10]

ghci> [1,2] ++ [3,4]
[1,2,3,4]
ghci> 1:2:[3,4]
[1,2,3,4]
ghci> 1:2:3:4:[]
[1,2,3,4]
ghci> "hola" ++ "mundo"
"holamundo"
ghci> "hola" ++ " " ++  "mundo"
"hola mundo"
ghci> ['h','o','l','a'] ++ ' ':['s','o','l']
"hola sol"
ghci> "computadora" !! 5
't'
ghci> [0,1,2,3,4,5] !! 0
0
ghci> [0,1,2,3,4,5] !! 2
2
ghci> [0,1,2,3,4,5] !! 7
*** Exception: Prelude.!!: index too large ...
ghci> 1:2:3:[4,5]++[6,7]
[1,2,3,4,5,6,7]
ghci> usoDeHead [1,2,3]
1
ghci> usoDeTail [1,2,3]
[2,3]
ghci> length [1,2,456,245,5,4,3,3,3,3,3,3,3,4]
14
ghci> null [] 
True
ghci> null [1]
False
ghci> reverse []
[]
ghci> reverse [1]
[1]
ghci> reverse [1,2]
[2,1]
ghci> reverse [1,2,3,4,5] 
[5,4,3,2,1]
ghci> take 24 [6,12..]  
[6,12,18,24,30,36,42,48,54,60,66,72,78,84,90,96,102,108,114,120,126,132,138,144]
ghci> take 4 (cycle [1,2,77])
[1,2,77,1]
ghci> take 8 (cycle [1,2,77]) 
[1,2,77,1,2,77,1,2]
ghci> take 40 (cycle "delfina")
"delfinadelfinadelfinadelfinadelfinadelfi"
ghci> take 40 (cycle "delfina ")
"delfina delfina delfina delfina delfina "
ghci> take 40 (repeat 5)        
[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]
ghci> replicate 3 10
[10,10,10]    
ghci> length [1,2,456,245,5,4,3,3,3,3,3,3,3,4]
14
ghci> null [] 
True
ghci> null [1]
False
ghci> reverse []
[]
ghci> reverse [1]
[1]
ghci> reverse [1,2]
[2,1]
ghci> reverse [1,2,3,4,5] 
[5,4,3,2,1]
ghci> drop 4 [1,2,3,4,5]
[5]
ghci> drop 400 [1,2,3,4,5]
[]
ghci> drop 0 [1,2,3,4,5]  
[1,2,3,4,5]
ghci> minimum [(-1),3,4]
-1
ghci> minimum [1,3,4,1000]
1
ghci> maximum [1,3,4,1000]
1000
ghci> sum [3,7]
10
ghci> product [2,3]
6
ghci> product [1,2,3,4,6,7,8,6666]
53754624
ghci> product [1,2,3,4,6,7,8,6666,0]
0
ghci> 4 `elem` [1,2,3,4]
True
ghci> 4 `elem` [1,2,3,7]
False
ghci> elem 5 []
False
ghci> elem 5 [5]
True
            -> Lists comprehension
ghci> [x+y|x <- [2,4,5], y <- [1,3,5]]     
[3,5,7,5,7,9,6,8,10]
ghci> [x-y|x <- [2,4,5], y <- [1,3,5]]
[1,-1,-3,3,1,-1,4,2,0]
ghci> [x-y|x <- [2,4,6], y <- [1,3,5]]
[1,-1,-3,3,1,-1,5,3,1]
ghci> adjetivos = ["lindo","alto"]
ghci> nombres = ["Roger Taylor","Draco Malfoy"]
ghci> [nombre ++ " " ++ "es" ++ adjetivo| nombre <- nombres, adjetivo <- adjetivos]
["Roger Taylor eslindo","Roger Taylor esalto","Draco Malfoy eslindo","Draco Malfoy esalto"]
ghci> [nombre ++ " " ++ "es" ++ " " ++  adjetivo| nombre <- nombres, adjetivo <- adjetivos]
["Roger Taylor es lindo","Roger Taylor es alto","Draco Malfoy es lindo","Draco Malfoy es alto"]
ghci> soloPares [1,2,3,4,5,6,7,8,9,10]
[2,4,6,8,10]
ghci> usoDeLast 10 [1,2,3]
False
ghci> usoDeLast 10 [1,2,3,10]
True
ghci> let xxs = [[1,2,1],[3,2,2],[4,5,3]]
ghci> [[y|y <- xs, usoDeLast y xs]| xs <-xxs]
[[1,1],[2,2],[3]]
-- Entonces acá tengo que agregar un sacar repetidos (no estoy segura de cómo hacerlo
-- pero usaría un eliminar repetidos)
-- Una apción mejor sería:
ghci> [last[y|y <- xs, usoDeLast y xs]| xs <-xxs]
[1,2,3]


            -> Prueba función saludo
ghci> saludo "Juan"
"Hola! soy Juan"


